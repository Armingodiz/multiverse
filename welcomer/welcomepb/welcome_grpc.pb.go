// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: welcomer/welcomepb/welcome.proto

package welcomepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WelcomeServiceClient is the client API for WelcomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WelcomeServiceClient interface {
	// unary example
	Welcome(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*WelcomeResponse, error)
	// server streaming example
	GetGreetings(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (WelcomeService_GetGreetingsClient, error)
}

type welcomeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWelcomeServiceClient(cc grpc.ClientConnInterface) WelcomeServiceClient {
	return &welcomeServiceClient{cc}
}

func (c *welcomeServiceClient) Welcome(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*WelcomeResponse, error) {
	out := new(WelcomeResponse)
	err := c.cc.Invoke(ctx, "/welcomer.WelcomeService/Welcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welcomeServiceClient) GetGreetings(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (WelcomeService_GetGreetingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WelcomeService_ServiceDesc.Streams[0], "/welcomer.WelcomeService/GetGreetings", opts...)
	if err != nil {
		return nil, err
	}
	x := &welcomeServiceGetGreetingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WelcomeService_GetGreetingsClient interface {
	Recv() (*WelcomeResponse, error)
	grpc.ClientStream
}

type welcomeServiceGetGreetingsClient struct {
	grpc.ClientStream
}

func (x *welcomeServiceGetGreetingsClient) Recv() (*WelcomeResponse, error) {
	m := new(WelcomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WelcomeServiceServer is the server API for WelcomeService service.
// All implementations must embed UnimplementedWelcomeServiceServer
// for forward compatibility
type WelcomeServiceServer interface {
	// unary example
	Welcome(context.Context, *WelcomeRequest) (*WelcomeResponse, error)
	// server streaming example
	GetGreetings(*WelcomeRequest, WelcomeService_GetGreetingsServer) error
	mustEmbedUnimplementedWelcomeServiceServer()
}

// UnimplementedWelcomeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWelcomeServiceServer struct {
}

func (UnimplementedWelcomeServiceServer) Welcome(context.Context, *WelcomeRequest) (*WelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Welcome not implemented")
}
func (UnimplementedWelcomeServiceServer) GetGreetings(*WelcomeRequest, WelcomeService_GetGreetingsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGreetings not implemented")
}
func (UnimplementedWelcomeServiceServer) mustEmbedUnimplementedWelcomeServiceServer() {}

// UnsafeWelcomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WelcomeServiceServer will
// result in compilation errors.
type UnsafeWelcomeServiceServer interface {
	mustEmbedUnimplementedWelcomeServiceServer()
}

func RegisterWelcomeServiceServer(s grpc.ServiceRegistrar, srv WelcomeServiceServer) {
	s.RegisterService(&WelcomeService_ServiceDesc, srv)
}

func _WelcomeService_Welcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelcomeServiceServer).Welcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/welcomer.WelcomeService/Welcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelcomeServiceServer).Welcome(ctx, req.(*WelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelcomeService_GetGreetings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WelcomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WelcomeServiceServer).GetGreetings(m, &welcomeServiceGetGreetingsServer{stream})
}

type WelcomeService_GetGreetingsServer interface {
	Send(*WelcomeResponse) error
	grpc.ServerStream
}

type welcomeServiceGetGreetingsServer struct {
	grpc.ServerStream
}

func (x *welcomeServiceGetGreetingsServer) Send(m *WelcomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WelcomeService_ServiceDesc is the grpc.ServiceDesc for WelcomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WelcomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "welcomer.WelcomeService",
	HandlerType: (*WelcomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Welcome",
			Handler:    _WelcomeService_Welcome_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGreetings",
			Handler:       _WelcomeService_GetGreetings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "welcomer/welcomepb/welcome.proto",
}
